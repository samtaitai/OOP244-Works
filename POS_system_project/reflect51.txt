* Citation *

Utils class
Provided by the professor:
getInt();
getInt(int min, int max, const char* prompt);
void getSystemDate(int& year, int& mon, int& day, int& hour, int& min, bool dateOnly);
int uniqueDateValue(int year, int mon, int day, int hour, int min);
int daysOfMonth(int year, int month);

PosApp class
Provided by the lecture material:
void swap(Item** array, int size);

Item class
sourced by outside of lecture codes: 
ifstream.peek() (source:https://cplusplus.com/reference/istream/istream/peek/)

Date class
Sourced by outside of lecture codes: 
setprecision(), setfill(), setw() (source: https://stackoverflow.com/questions/16248359/)

* Reflection * 

MS51:
Because in 'PosApp::loadRecs' a dynamic object(either Perishable or NonPerishable) is created, deallocation must be done somewhere. And the 'somewhere' is highly probably is ~PosApp. 
Item inherits PosIO not PosApp, I need to manually deallocate Item pointers which have resources(m_name) in ~PosApp. Otherwise, the compiler wouldn't call Item's destructor automatically. 
At first, I thought I need to access inside of Item object and deallocate its m_name attribute but it doesn't work that way. Eventually I deallocated single Item* and it goes: 
calling Perishable(or NonPerishable) destructor. 
calling Item destructor(it has dynamically allocated name attribute).
calling Error destructor(it has dynamically allocated message attribute).
back to Item destructor. 
calling PosIO destructor(Item's base class). 
back to Perishable destructor and out. 
To be honest, it's mind blowing. I also found that if a class has dynamically allocated attribute(like Item has m_errState), its destructor calls the attribute's destructor automatically even though two of them are not in a hierarhy. My best guess is: destructuring Error object is a part of destructuring Item object? 